from dataclasses import dataclass
from typing import List, Dict, Optional
import json
from dataclasses import asdict


@dataclass
class CharacterDataset:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –Ω–æ–≤–æ–º—É –¢–ó"""

    character_name: str
    role_and_purpose: str
    format: str
    target_audience: str
    language: str

    personality_type: str
    key_traits: List[str]
    tone_of_communication: str
    initiative_level: str
    attitude_towards_user: str

    language_register: str
    language_complexity: str
    uses_emoji: str
    emoji_examples: List[str]
    uses_memes: str
    memes_examples: List[str]
    uses_stickers: str
    example_phrases: List[str]

    core_tasks: List[str]
    context_memory: str
    scenarios: List[str]

    visual_type: str
    age_and_gender: str
    clothing_style: str
    color_palette: str
    signature_gestures: str
    avatar_or_stickerpack: str

    integrations: List[str]
    ai_component: str
    ui_buttons: str
    timeouts_logic: str
    platforms: List[str]

    content_filter: str
    banned_topics: List[str]
    moderation_triggers: List[str]
    behavior_restrictions: str

    scalability: str
    brand_tone_guidelines: str
    references: List[str]

    # –î–∏–∞–ª–æ–≥–∏
    dialogues: List[Dict[str, str]]

class DatasetCollector:
    """–°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ —Ñ–∏–ª—å–º–∞"""

    def __init__(self):
        self.all_dialogs = []
    def load_dialogues_from_json(self, json_path: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∏–∞–ª–æ–≥–∏ –∏–∑ JSON –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        with open(json_path, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError as e:
                raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        self.all_dialogs = []
        for item in data:
            if isinstance(item, dict) and "character_name" in item and "line" in item:
                self.all_dialogs.append({
                    "character": item["character_name"],
                    "line": item["line"]
                })
            else:
                print(f"[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å: {item}")

    def _build_context_response_pairs(self, character: str) -> List[Dict[str, str]]:
        """
        –°–æ–∑–¥–∞—ë—Ç –ø–∞—Ä—ã (–∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ä–µ–ø–ª–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞)
        :param character: –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç—Ä–æ–∏–º –¥–∞—Ç–∞—Å–µ—Ç
        :return: —Å–ø–∏—Å–æ–∫ –ø–∞—Ä, –≥–¥–µ response ‚Äî —Ä–µ–ø–ª–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        """
        pairs = []

        for i in range(len(self.all_dialogs)):
            current = self.all_dialogs[i]

            if current["character"] == character:
                if i > 0:
                    context = self.all_dialogs[i - 1]["line"]
                    response = current["line"]
                    pairs.append({
                        "context": context,
                        "response": response
                    })
        return pairs

    def create_dataset_manually(
        self,
        character: str,
        role_and_purpose: str,
        format: str,
        target_audience: str,
        language: str,
        personality_type: str,
        key_traits: List[str],
        tone_of_communication: str,
        initiative_level: str,
        attitude_towards_user: str,
        language_register: str,
        language_complexity: str,
        uses_emoji: str,
        emoji_examples: List[str],
        uses_memes: str,
        memes_examples: List[str],
        uses_stickers: str,
        example_phrases: List[str],
        core_tasks: List[str],
        context_memory: str,
        scenarios: List[str],
        visual_type: str,
        age_and_gender: str,
        clothing_style: str,
        color_palette: str,
        signature_gestures: str,
        avatar_or_stickerpack: str,
        integrations: List[str],
        ai_component: str,
        ui_buttons: str,
        timeouts_logic: str,
        platforms: List[str],
        content_filter: str,
        banned_topics: List[str],
        moderation_triggers: List[str],
        behavior_restrictions: str,
        scalability: str,
        brand_tone_guidelines: str,
        references: List[str],
    ) -> Optional[CharacterDataset]:
        """–°–æ–∑–¥–∞—ë—Ç CharacterDataset —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏–∑ JSON"""

        if not any(item["character"] == character for item in self.all_dialogs):
            print(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ.")
            return None

        dialogues = self._build_context_response_pairs(character)

        return CharacterDataset(
            character_name=character,
            role_and_purpose=role_and_purpose,
            format=format,
            target_audience=target_audience,
            language=language,

            personality_type=personality_type,
            key_traits=key_traits,
            tone_of_communication=tone_of_communication,
            initiative_level=initiative_level,
            attitude_towards_user=attitude_towards_user,

            language_register=language_register,
            language_complexity=language_complexity,
            uses_emoji=uses_emoji,
            emoji_examples=emoji_examples,
            uses_memes=uses_memes,
            memes_examples=memes_examples,
            uses_stickers=uses_stickers,
            example_phrases=example_phrases,

            core_tasks=core_tasks,
            context_memory=context_memory,
            scenarios=scenarios,

            visual_type=visual_type,
            age_and_gender=age_and_gender,
            clothing_style=clothing_style,
            color_palette=color_palette,
            signature_gestures=signature_gestures,
            avatar_or_stickerpack=avatar_or_stickerpack,

            integrations=integrations,
            ai_component=ai_component,
            ui_buttons=ui_buttons,
            timeouts_logic=timeouts_logic,
            platforms=platforms,

            content_filter=content_filter,
            banned_topics=banned_topics,
            moderation_triggers=moderation_triggers,
            behavior_restrictions=behavior_restrictions,

            scalability=scalability,
            brand_tone_guidelines=brand_tone_guidelines,
            references=references,

            dialogues=dialogues
        )


# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: –®—Ä–µ–∫ ===
if __name__ == "__main__":
    collector = DatasetCollector()
    collector.load_dialogues_from_json("movie_dialogues.json")

    character_dataset = collector.create_dataset_manually(
        character="Donkey",
        role_and_purpose="Funny, kind and extravert. Loves his friends",
        format="–ß–∞—Ç-–±–æ—Ç –≤ Telegram",
        target_audience="18-30 –ª–µ—Ç, –ª—é–±–∏—Ç–µ–ª–∏ —é–º–æ—Ä–∞ –∏ —Ñ—ç–Ω—Ç–µ–∑–∏",
        language="—Ä—É—Å—Å–∫–∏–π",

        personality_type="Kind, loveful",
        key_traits=["kinf", "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π", "clever", "strong"],
        tone_of_communication="–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
        initiative_level="—Å—Ä–µ–¥–Ω–∏–π",
        attitude_towards_user="support",

        language_register="informal",
        language_complexity="simple",
        uses_emoji="not a lot",
        emoji_examples=["üòé", "üí°", "üß†", "üê∏"],
        uses_memes="–ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏",
        memes_examples=["–ö–æ–≥–¥–∞ —Ç—ã –Ω–µ —Å–¥–∞–ª –¥–∑", "–ë—É! –ò—Å–ø—É–≥–∞–ª—Å—è? –ù–µ –±–æ–π—Å—è"],
        uses_stickers="–Ω–µ—Ç",
        example_phrases=[
            "–ñ–∏–∑–Ω—å ‚Äî –∫–∞–∫ –∫–æ—Ä–æ–±–∫–∞ —à–æ–∫–æ–ª–∞–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ç‚Ä¶",
            "–¢—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è, –∫–æ–≥–¥–∞ –∑–ª–∏—à—å—Å—è.",
        ],

        core_tasks=[
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É",
            "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã",
            "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"
        ],
        context_memory="–∏–º—è, —É—Ä–æ–≤–µ–Ω—å, –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∏–∞–ª–æ–≥–∏",
        scenarios=[
            "onboarding",
            "—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ —ç–º–æ—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–º–∞—Ä–∫–∏"
        ],

        visual_type="2D",
        age_and_gender="–≤–∑—Ä–æ—Å–ª—ã–π –º—É–∂—á–∏–Ω–∞",
        clothing_style="–∑–µ–ª—ë–Ω—ã–π –ø–ª–∞—â –∏ –¥–æ—Å–ø–µ—Ö–∏",
        color_palette="–∑–µ–ª—ë–Ω–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ —Ç–æ–Ω–∞",
        signature_gestures="–ø–æ–¥–º–∏–≥–∏–≤–∞–Ω–∏–µ, —É—Ö–º—ã–ª–∫–∞",
        avatar_or_stickerpack="Midjourney",

        integrations=["Telegram Bot API", "GPT"],
        ai_component="GPT, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 0.7",
        ui_buttons="Reply",
        timeouts_logic="—Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ 0.5‚Äì2 —Å–µ–∫—É–Ω–¥—ã",
        platforms=["Telegram"],

        content_filter="–¥–∞",
        banned_topics=["politics", "religion", "fight"],
        moderation_triggers=["—Ä—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞", "–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏"],
        behavior_restrictions="–Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ –ª–∏—á–Ω—ã–µ —Å–≤—è–∑–∏",

        scalability="–¥–∞, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–∏–∑—É–∞–ª",
        brand_tone_guidelines="–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–æ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º",
        references=["@replika_bot", "@dotline_bot", "Persona X –∏–∑ [–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞]"],
    )

    if character_dataset:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        output_path = "Donkey_dataset.json"
        dataset_dict = asdict(character_dataset)
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(dataset_dict, f, ensure_ascii=False, indent=4)

        print(f"–î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_path}")
    else:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç.")